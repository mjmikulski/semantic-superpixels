import os

import streamlit as st

from settings import IMAGES_DIR
from utils.io_utils import load_img

EXPLANATION = '''\
# Semantic superpixels 
Let's first explain what superpixels are and then we will see how they can be 
generalized for semantic maps.


## Superpixels

Superpixels is a know Computer Vision method used to group together similar 
neighbour pixels. Such groups of pixels are called superpixels. 

They can be used as input to other CV algorithms.

### Language analogy
Let's make an analogy with language. Pixels are like letters - a single one 
does not have many meaning. Superpixels are like words - have much more 
semantic value (i.e. meaning). It's much more natural to think of a sentence 
as of a sequence of words. Similarly, a picture can be though of as a 
grid of superpixels.

### How are they generated?
There are really many ways to generate superpixels.
You can check exhaustive (and probably slightly outdated) comparison of many 
methods in the [paper](https://arxiv.org/abs/1612.01601) by Stutz et al.

Anyway, virtually all methods are based on clustering in 5-dimensional space, where 
3 dimensions are pixel values (RGB channels, or better: Lab channels) and 
2 other dimensions are position (x and y) of pixel relative to the boundaries.

Clustering in such a space tends to group together pixels that are close to 
each other and have similar colors. This simple yet powerful idea allows to 
well preserve boundaries of objects.

### SLIC
SLIC (Simple Linear Iterative Clustering) is the most popular method introduced by Achanta at al in 2010. 
[Here](https://www.iro.umontreal.ca/~mignotte/IFT6150/Articles/SLIC_Superpixels.pdf) is the paper.
It is a special case of k-means algorithm. 
By making use of locality (pixels that will land in one superpixels lay in restricted distance) it achieves good performance.
After the clustering converges, a refinement step enforces connectivity.


## Semantic superpixels idea
The idea is simple - instead of using RGB channels (or Lab as in SLIC), we use features generated by a neural network (ResNet-152 to be precise).
As the number of channels is much higher then 3, we perform PCA to limit the number of channels.
Work-in-progress here.

'''


def img_picker(images_dir=IMAGES_DIR):
    options = os.listdir(images_dir)
    options = sorted([file for file in options
                      if file.lower().endswith(('.jpg', '.jpeg', '.png'))])
    filename = st.sidebar.selectbox('Choose image', options=options, index=1)
    return filename


load_img = st.cache(load_img)
